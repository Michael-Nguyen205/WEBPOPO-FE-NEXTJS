import type { Metadata } from "next";
import localFont from "next/font/local";
import "../../globals.css";
import Footer from "./components/footer";

import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import "animate.css";
import { ToggleMenuProvider } from "@/shared/context/toggleMenuProvider";
import { routing } from "@/i18n/routing";
import Header from "@/app/[locale]/(publics)/components/header/Header";

import { fetchData } from "@/shared/utils/CallApiUtil";
// import { ErrorBoundary } from 'react-error-boundary'
import GlobalError from "@/app/global-error";
import ErrorBoundary from "@/shared/components/ErrorBoundary";
import { usePathname } from "@/i18n/routing";
//  Lấy dữ liệu từ API


// Font configuration
const mylocalfont = localFont({
  src: "../../../../public/fonts/Oswald/Oswald-VariableFont_wght.ttf",
  display: "swap",
  weight: "400",
});


// Metadata definition
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Generate static params function
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

// RootLayout component nhận categories từ props
export default async function RootLayout({
  children,
  params: { locale },
  categories, // Nhận categories từ props
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
  categories: {
    id: string;
    name: string;
    children?: { id: string; name: string }[];
  }[]; // Đảm bảo rằng categories có kiểu dữ liệu hợp lý
}>) {
  // Lấy các tin nhắn cho locale hiện tại
  const messages = await getMessages({ locale });
  console.log("Current Pathname:", usePathname);
  // const pathname = usePathname();
  // console.log("Current Pathname:", pathname);

  // Log categories để kiểm tra
  console.log("categories", categories);

  return (
    <html lang={locale}>
      <body className={`${mylocalfont.className}`}>
        <div className="">
          <NextIntlClientProvider messages={messages}>
            <ToggleMenuProvider>
              <ErrorBoundary fallback={<GlobalError />}>
                <Header />

                {children}
                <Footer />
              </ErrorBoundary>
            </ToggleMenuProvider>
          </NextIntlClientProvider>
        </div>
      </body>
    </html>
  );
}
